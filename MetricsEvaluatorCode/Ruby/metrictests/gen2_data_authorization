#!/home/mark_moby_wilkinson/.rvm/rubies/ruby-2.5.1/bin/ruby
require_relative 'fair_metrics_utilities'
require 'cgi'
require 'json'
require 'uri'
require 'rdf'
require 'rdf/turtle'
require 'sparql'

debug = false

def testGUID
	
	guid = @swagger.testedGUID
	
	metadata = Utils::resolveit(guid)  # this is where the magic happens!

	metadata.comments.each do |c|
		@swagger.addComment(c)
	end

	if metadata.guidtype == "unknown"
		@swagger.addComment("  The identifier #{guid} did not match any known identification system (tested inchi, doi, handle, uri) and therefore did not pass this metric.  If you think this is an error, please contact the FAIR Metrics group (http://fairmetrics.org).")
		@swagger.score = 0
		return @swagger.createEvaluationResponse
	end
	
	hash = metadata.hash
	
	properties = Utils::deep_dive_properties(hash)

	dataGUID=""
	properties.each do |keyval|
		key, value = nil, nil
		(key, value) = keyval;
		key = key.to_s
		if key =~ /codeRepository/
			@swagger.addComment "found 'codeRepository' in metadata.  "
			dataGUID=value

		elsif key =~ /mainEntity/
			@swagger.addComment "found schema 'mainEntity' in metadata.  "
			dataGUID=value
	
		elsif key =~ /distribution/
			@swagger.addComment "found schema or DCAT 'distribution' in metadata.  "
			dataGUID=value

		elsif key =~ /accessRights/
			@swagger.addComment "found schema or DCAT 'distribution' in metadata.  "
			dataGUID=value

		elsif key =~ /primaryTopic/
			@swagger.addComment "found 'primaryTopic' in metadata.  "
			dataGUID=value

		elsif key =~ /is-about/ or key =~ /IAO:0000136/ or key =~ /IAO_0000136/
			@swagger.addComment "found Information Artifact Ontology 'is-about' in metadata.  "
			dataGUID=value

		elsif key =~ /000332/ or key =~ /SIO:0000136/
			@swagger.addComment "found SIO is about in metadata.  "
			dataGUID=value

		end
		
		
	end

	g = metadata.graph
	if @swagger.debug
		g.each {|s| $stderr.puts s.subject.to_s + "\tPRED: " + s.predicate.to_s + "\tOBJ: " + s.object.to_s + "\n"}
	end
	
	if g.size > 0  # have we found anything yet?
		query = SPARQL.parse("select ?o where {?s <http://semanticscience.org/resource/is-about> ?o}")
		results = query.execute(g)
		if results.any?
			dataGUID=results.first[:o].value
			@swagger.addComment "found identifier #{results.first[:o]} using SIO. "
		end

		query = SPARQL.parse("select ?o where {?s <http://semanticscience.org/resource/SIO_000332> ?o}")
		results = query.execute(g)
		if  results.any?
			dataGUID=results.first[:o].value
			@swagger.addComment "found identifier #{results.first[:o]} using SIO. "
		end


		query = SPARQL.parse("select ?o where {?s <http://schema.org/mainEntity> ?o}")
		results = query.execute(g)
		if  results.any?
			dataGUID=results.first[:o].value
			@swagger.addComment "found identifier #{results.first[:o]} using Schema.org mainEntity property. "
		end

		query = SPARQL.parse("select ?o where {?s <http://purl.org/dc/terms/accessRights> ?o}")
		results = query.execute(g)
		if  results.any?
			dataGUID=results.first[:o].value
			@swagger.addComment "found identifier #{results.first[:o]} using Schema.org mainEntity property. "
		end

		query = SPARQL.parse("select ?o where {?s <http://schema.org/distribution> ?b . ?b  <http://schema.org/contentUrl> ?o}")
		results = query.execute(g)
		if  results.any?
			dataGUID=results.first[:o].value
			@swagger.addComment "found identifier #{results.first[:o]} using Schema.org distribution property. "
		end

		query = SPARQL.parse("select ?o where {?s <http://www.w3.org/ns/dcat#distribution> ?b .
							 ?b  <http://www.w3.org/ns/dcat#accessURL> ?o}")
		results = query.execute(g)
		if  results.any?
			dataGUID=results.first[:o].value
			@swagger.addComment "found identifier #{results.first[:o]} using DCAT distribution property. "
		end

		query = SPARQL.parse("select ?o where {?s <http://www.w3.org/ns/dcat#distribution> ?b .
							 ?b  <ttp://www.w3.org/ns/dcat#downloadURL> ?o}")
		results = query.execute(g)
		if  results.any?
			dataGUID=results.first[:o].value
			@swagger.addComment "found identifier #{results.first[:o]} using DCAT distribution property. "
		end

		query = SPARQL.parse("select ?o where {?s <http://purl.obolibrary.org/obo/IAO_0000136> ?o}")
		results = query.execute(g)
		if  results.any?
			dataGUID=results.first[:o].value
			@swagger.addComment "found identifier #{results.first[:o]} using IAO. "
		end
		
		query = SPARQL.parse("select ?o where {?s <http://schema.org/codeRepository> ?o}")
		results = query.execute(g)
		if  results.any?
			dataGUID=results.first[:o].to_s
			@swagger.addComment "found identifier #{results.first[:o]} using schema.org. "
		end
		
	end

	if (dataGUID == "") or (!dataGUID.is_a?String) 
		@swagger.score = 0
		@swagger.addComment "Was unable to locate the data identifier in the metadata using any (common) property/predicate reserved for this purpose.  Tested SIO:is-about, SIO:0003323, schema:distribution, dcat:distribution, schema:mainEntity, IAO:0000136, schema:codeRepository, and foaf:primaryTopic.  Sorry! "
		return @swagger.createEvaluationResponse
	end

	# if we	get here, we at least have a string representing the GUID.
	# Let's now run it through the metadata collection routine
	# to see what it is

	metadata2 = Utils::resolveit(dataGUID)  # this is where the magic happens!

	if metadata2.guidtype == "unknown"
		@swagger.addComment("  The identifier #{dataGUID} did not match any known identification system (tested inchi, doi, handle, uri) and therefore did not pass this metric.  If you think this is an error, please contact the FAIR Metrics group (http://fairmetrics.org).")
		@swagger.score = 0
		return @swagger.createEvaluationResponse
	else
		@swagger.addComment("  The identifier #{dataGUID} is recognized as a #{metadata2.guidtype}, which is resolvable by an open and free protocol.  ")
		@swagger.score = 1
		return @swagger.createEvaluationResponse
	end

	
end


if debug
#	@input = '{"subject": "10.5281/zenodo.1147435"}'  # doi fail
#	@input = '{"subject": "10.5281/zenodo.1065973"}'  # doi fail
#	@input = '{"subject": "BSYNRYMUTXBXSQ-UHFFFAOYSA-N"}' # inchi
#	@input = '{"subject": "LFQSCWFLJHTTHZ-UHFFFAOYSA-N"}' # another inchi
#	@input = '{"subject": "20.1000/105"}'  # handle (fail)
	@input = '{"subject": "http://linkeddata.systems/Magnaporthe/polyA_Sites"}'  # handle

else 
	@input = $stdin.read
end


cgi = CGI.new

schemas = {'subject' => ['string', "the GUID being tested"]}

@swagger = Swagger.new({
			:title => "FAIR Metrics Gen2 - data autentication and authorization",
			:description => "Test a discovered data GUID for the ability to implement authentication and authorization in its resolution protocol.  Currently passes InChI Keys, DOIs, Handles, and URLs.  It also searches the metadata for the Dublin Core 'accessRights' property, which may point to a document describing the data access process. Recognition of other identifiers will be added upon request by the community.",
			:tests_metric => 'https://purl.org/fair-metrics/Gen2_FM_A1.2',
			:applies_to_principle => "A1.2",
			:organization => 'FAIR Metrics Authoring Group',
			:org_url => 'http://fairmetrics.org',
			:responsible_developer => "Mark D Wilkinson",
			:email => 'markw@illuminae.com',
			:developer_ORCiD => '0000-0001-6960-357X',
			:protocol => 'http',
			:host => 'linkeddata.systems',
			:basePath => '/cgi-bin',
			:path => '/FAIR_Tests/gen2_metadata_protocol',
			:response_description => 'The response is a binary (1/0), success or failure',
			:schemas => schemas,
			:fairsharing_key_location => '../fairsharing.key',
			:debug => false			 				 
})

if (!cgi.request_method or cgi.request_method == "GET") and !debug
        puts "Content-type: application/openapi+yaml;version=3.0\n\n"
        puts @swagger.getSwagger
elsif cgi.request_method == "POST" or debug
        input_json = JSON.parse(@input)
        guid = input_json["subject"]
        @swagger.testedGUID = guid
        response = testGUID
        puts "Content-type: application/json+ld\n\n"
        puts response
end
